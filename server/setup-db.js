// VeritabanÄ± ÅŸemasÄ± kurulum betiÄŸi
const { pool } = require('./config/db');

async function createSchema() {
  console.log('VeritabanÄ± ÅŸemasÄ± oluÅŸturuluyor...');
  
  const queries = [
    // TÃ¼rkÃ§e karakter desteÄŸi iÃ§in karakter setini ayarla
    "SET NAMES utf8mb4",
    "SET character_set_connection = utf8mb4",
    
    // KullanÄ±cÄ±lar tablosu
    `CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(50) NOT NULL UNIQUE,
      email VARCHAR(100) NOT NULL UNIQUE,
      password VARCHAR(255) NOT NULL,
      full_name VARCHAR(100),
      avatar VARCHAR(255),
      points INT DEFAULT 0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_login TIMESTAMP NULL,
      is_admin BOOLEAN DEFAULT FALSE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_turkish_ci`,

    // Oyun tÃ¼rleri tablosu
    `CREATE TABLE IF NOT EXISTS game_types (
      id VARCHAR(50) PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      description TEXT,
      icon VARCHAR(255),
      enabled BOOLEAN DEFAULT TRUE,
      settings JSON,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_turkish_ci`,

    // Adam asmaca kelimeleri tablosu
    `CREATE TABLE IF NOT EXISTS hangman_words (
      id INT AUTO_INCREMENT PRIMARY KEY,
      word VARCHAR(100) NOT NULL,
      category VARCHAR(50),
      difficulty VARCHAR(20) DEFAULT 'normal',
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_turkish_ci`,

    // Aktif bulmacalar tablosu
    `CREATE TABLE IF NOT EXISTS active_puzzles (
      id INT AUTO_INCREMENT PRIMARY KEY,
      game_id VARCHAR(50) NOT NULL,
      user_id INT,
      content JSON NOT NULL,
      solution TEXT NOT NULL,
      difficulty VARCHAR(20) DEFAULT 'normal',
      completed BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      completed_at TIMESTAMP NULL,
      FOREIGN KEY (game_id) REFERENCES game_types(id),
      FOREIGN KEY (user_id) REFERENCES users(id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_turkish_ci`,

    // KullanÄ±cÄ± skorlarÄ± tablosu
    `CREATE TABLE IF NOT EXISTS user_scores (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_id INT NOT NULL,
      game_id VARCHAR(50) NOT NULL,
      score INT NOT NULL,
      puzzle_id INT,
      completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users(id),
      FOREIGN KEY (game_id) REFERENCES game_types(id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_turkish_ci`
  ];

  try {
    const connection = await pool.getConnection();
    
    for (const query of queries) {
      console.log('Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±yor:', query.split('(')[0] + '...');
      await connection.query(query);
    }
    
    connection.release();
    console.log('âœ“ TÃ¼m tablolar baÅŸarÄ±yla oluÅŸturuldu!');
    return true;
  } catch (error) {
    console.error('âœ— Åžema oluÅŸturma hatasÄ±:', error.message);
    return false;
  }
}

async function insertSampleData() {
  console.log('\nÃ–rnek veriler ekleniyor...');
  
  const sampleQueries = [
    // Adam Asmaca oyununu ekle
    `INSERT INTO game_types (id, name, description, icon, settings)
     VALUES ('hangman', 'Adam Asmaca', 'Kelimeyi tahmin etmeye Ã§alÄ±ÅŸÄ±n!', 'hangman_icon.png', 
       '{"maxAttempts": 6, "difficultyLevels": ["kolay", "normal", "zor"]}')
     ON DUPLICATE KEY UPDATE
       name = VALUES(name), description = VALUES(description)`,

    // Ã–rnek kelimeler
    `INSERT IGNORE INTO hangman_words (word, category, difficulty) VALUES
     ('KALEM', 'Okul', 'kolay'),
     ('KÄ°TAP', 'Okul', 'kolay'),
     ('DEFTER', 'Okul', 'kolay'),
     ('BÄ°LGÄ°SAYAR', 'Teknoloji', 'normal'),
     ('TELEFON', 'Teknoloji', 'normal'),
     ('PENCERE', 'Ev', 'normal'),
     ('MASAÃœSTÃœ', 'Teknoloji', 'normal'),
     ('MÄ°KRODENETLEYÄ°CÄ°', 'Teknoloji', 'zor'),
     ('DÃœZGÃœNALTIGEN', 'Matematik', 'zor'),
     ('ALGORÄ°TMA', 'Teknoloji', 'zor')`,

    // Admin kullanÄ±cÄ±sÄ± oluÅŸtur (ÅŸifre: admin123)
    `INSERT INTO users (username, email, password, full_name, is_admin)
     VALUES ('admin', 'admin@hobi-x.com', '$2b$10$JAuULjrS8Z.DcBRHmSJxGO1Tq1vLBpFzpKjiLJO.TTxXn3JhUGJYC', 'Sistem YÃ¶neticisi', TRUE)
     ON DUPLICATE KEY UPDATE email = VALUES(email)`
  ];

  try {
    const connection = await pool.getConnection();
    
    for (const query of sampleQueries) {
      console.log('Veri ekleniyor...');
      await connection.query(query);
    }
    
    connection.release();
    console.log('âœ“ Ã–rnek veriler baÅŸarÄ±yla eklendi!');
    return true;
  } catch (error) {
    console.error('âœ— Veri ekleme hatasÄ±:', error.message);
    return false;
  }
}

async function setupDatabase() {
  try {
    console.log('VeritabanÄ± kurulumu baÅŸlatÄ±lÄ±yor...\n');
    
    const schemaResult = await createSchema();
    if (!schemaResult) {
      console.log('Åžema oluÅŸturma baÅŸarÄ±sÄ±z, iÅŸlem durduruluyor.');
      return;
    }
    
    const dataResult = await insertSampleData();
    if (!dataResult) {
      console.log('Veri ekleme baÅŸarÄ±sÄ±z, ancak ÅŸema oluÅŸturuldu.');
      return;
    }
    
    console.log('\nðŸŽ‰ VeritabanÄ± kurulumu baÅŸarÄ±yla tamamlandÄ±!');
    console.log('Admin kullanÄ±cÄ±sÄ±: admin / admin123');
    console.log('Sunucuyu baÅŸlatmak iÃ§in: npm start');
    
  } catch (error) {
    console.error('Kurulum sÄ±rasÄ±nda beklenmedik hata:', error);
  } finally {
    process.exit(0);
  }
}

setupDatabase();
